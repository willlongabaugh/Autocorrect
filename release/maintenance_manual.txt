Modules:
decentcorrect.py -- the main module, handles user interface and managing the backend
trie.py -- implements the trie used to store the lexicon
generate.py -- creates a trie from various dictionaries
robertperry.py -- generates lists of suggestions


module: decentcorrect.py
decentcorrect.py contains the main script that executes the DecentCorrect user interface as well as DecentCorrect's own interface to its back end.

picklename:

	Future maintainers should know that the filename from which to load the pickled trie can be easily changed in line 13.

class Backend:

      The BackEnd class is DecentCorrect's interface with the Robert-Perry algorithm. The BackEnd constructor is passed a Trie object (trie -> self.trie); from this it constructs its own instance of the Robert-Perry algorithm (self.rp) and assigns default initial values to its other attributes. For more details on these fields, consult the comments in the code.
Fields:
self.rp -- an instance of the object that implements the Robert-Perry algorithm
self.first -- first index of most recent word considered
self.last -- last index of most recent word considered
self.string -- string most recently considered
self.suggestions -- list of (Node, score) or ((Node,Node), score) pairs for suggestions
self.suggestionsCap -- whether the user capitalized the most recently suggested word
self.active -- if False, key bindings do nothing

      getStringFromCand(self, c) takes in a candidate c (a (node, score) tuple or a ((node, node), score) tuple) and returns the string associated therewith (st) by a call or series of calls to Trie Node methods.

      check(self, s) takes in a string from prepare(self, f, l, s) and returns a boolean indicating whether the string ought to be checked against the lexicon for correction (True) or left alone (False) due to the presence of bizarre punctuation or capitalization. The details of this determination are laid out in the code comments. By the time a string makes it to check(self, s), the assumption is that all legitimate beginning and ending punctuation has been stripped and that all alphabetic characters are lowercase.

      prepare(self, f, l, s) takes in two ints (a first and last index, respectively) and a string. It prepares the string for comparison against the lexicon, stripping certain punctuation, handling capitalization, and making a call to check(self, s). If check(self, s) returns True, it returns a boolean indicating whether the input string was capitalized, adjursted markers of the string's first and last indicies, and the modified string itself. If check(self, s) returns False, it instead returns default values for the first three elements of the tuple and None for the string, which is interpreted in correct(self, s) as an error value.

      correct(self, s) takes in a string representing the whole entry text at the time of the method call and returns a first and last index, indicating which characters to remove from the entry field, a string to insert as the correction, and a boolean indicating whether or not a "real" correction was made--if False, the corrected string is identical to the string it replaces. After a call to prepare(self, f, l, s) to ready the last word of its input for comparison against the lexicon, correct(self, s) calls on the Robert-Perry algorithm to find candidate corrections (findCandidates). If any candidates are returned, it returns the best one as a correction and stores the rest as suggestions for possible later use.

      reject(self) returns the first and last indices of the most recent correction as well as the string that inhabited those indices pre-correction.

      learn(self, s) takes in a string and adds it to the trie via the add method of trie (which does nothing if the word is already in the lexicon). To prepare the string for trie insertion, learn(self, s) calls prepare(self, f, l, s) with dummy variables for the indices.

      takeSuggestion(self, i) takes an int specifying the suggestion to take and returns the corresponding string using a call to getStringFromCand(self, c)

main script:

     DecentCorrect's main script begins by creating a Trie object to hold the lexicon, either by loading a preexisting Trie object from a pickled state or, if that fails, by generating a Trie with a call to genlexicon(). It then constructs a BackEnd object with this Trie. Next it generates a Tkinter app, assigning it a title and geometry, as well as a trie-saving protocol to follow on window closure, specified in saveTrie(). Two Tkinter StringVar objects are constructed and set to default initial values, and a Tkinter Entry object is constructed with the main app (app).

     Next a number of front end functions are defined:

     correct() handles the correction behavior in the front end. It clears the old back end suggestions list (since a new word is now up for consideration), calls the back end's correct(self, s) method, and resets the StringVars appropriately to list the change and the alternate suggestions. It also enables keybindings (backend.active = True) as long as suggestions exist, since keybindings are only enabled in the back end in the event of a real correction.

     reject(event) handles the rejection behavior in the front end. As long as keybindings are enabled (backend.active is True), reject() calls the back end reject(self) method and returns the entry field to its previous state appropriately. When it is finished, it disables keybindings (backend.active = False) and clears the back end suggestions list and StringVars.

     takeS0(event), takeS1(event), and takeS2(event) all handle the taking of suggestions in the front end. So long as a suggestion exists corresponding to the number of the function, these functions substitute the suggestion for the previously made correction. Like reject(event), these functions finish by disabling keybindings and clearing the suggestions list and StringVars.

     send(event) handles DecentCorrect's mock sending capabilities. In order to determine when a message is ready to be sent and when it is in need of further correction before sending, send(event) relies on the global variable state declared on line 242. send(event) checks the current state of the entry field (before) against the saved state (state). If they are different, or there is no saved state, send(event) calls correct() to correct the final word of the message. After this it checks the entry state again (after). If the before and after states are the same, no real correction took place, so the message "sends", the entry field is cleared, and the message's words are all sent to the back end to be learned by learn(self, s). If the two are different, a real correction took place and the before state is saved. If the before state was originally the same as the saved state, the user has reverted his or her text to one they previously attempted to send, so no further correction should be attempted--instead, the same sending actions are performed.

     correctShortcut(event) simply calls correct() to allow keybindings to access the method just as well as the send(event) method does.

     Finally, keybindings are specified and the Entry and Labels are packed. A future maintainer should note that all control-character keybindings are specified for both the lower and upper case. The call to app.mainloop() generates the DecentCorrect GUI.

module: trie.py
A trie is a kind of tree that efficiently represents a lexicon.

class:Node
Node implements the nodes of the trie. All fields are mandatory for the constructor.

Fields:
end -- True if the node marks a valid word
parent -- the parent node
children -- a dict mapping lowercase letters (and apostrophe) onto child nodes
freq -- a frequency value
cap -- denotes first-letter capitalization of a word
allcap -- denotes all-letter capitalization of a word
word -- a string containing the word represented by this node. This is the string representation (__repr__()) of a Node object. None if not a word.
char -- the character it represents (i.e., its key in the parent node's dict)
Methods:
getWordWithCap() -- returns as a string the word represented by the node, capitalized according to the cap and allcap fields
getString() -- returns the string represented by the node by traversing the tree upward. This will work even if the node does not represent a valid word.

class:Trie 
Trie contains a root node, and has methods for looking up words and adding words.

Fields:
header -- the root node
Methods:
add(s,freq=0,cap=False,allCap=False): adds a word s to the trie with the specified parameters; if it is already there, does nothing. Creates new nodes as needed.
lookup(s): looks up s. If a node is found representing s and it is a valid word, returns that node; otherwise, returns None.

module:generate.py
The generate module contains one function, genlexicon(), which returns a Trie object. The goal of this function is to add every valid word to the trie with proper capitalization data, add frequency data for words where it is available, and for those words that have possessives, add the possessive.

frequency_scale: a constant to scale frequency counts by. Chosen arbitrarily, but it should be at least as large as the max frequency.

function genlexicon():
The main sources of words are the 2of12inf and 6of12 dictionaries from the 12dicts project. Additionally, there are some geographic terms stored in geo.txt, lists of names from the SSA in the names folder, and a developer-generated list of words in amherst.txt. To add these words to the trie, punctuation is stripped from the end, words with unusual punctuation are discarded, and the word is lowercased and added -- but with the proper capitalization information passed to the add method. Two-letter acronyms are ignored entirely, because they add too much noise to the lexicon.

If you want to add new words to the trie, it is important that these contain no characters other than apostrophes and lowercase letters, and that you pass along any relevant frequency or capitalization information.

Frequency data of words is derived from the file count_1w.txt, which records the results of a web crawl. The data is not high quality, and could be replaced. Frequency is stored as a dict with words as keys, and is looked up when a word from 2of12inf or 6of12 is added to the trie, and scaled by the value in frequency_scale.

Possessives are added for proper names from the SSA database, for geographic words, and for any words marked as nouns by the AGID project. The AGID files are used to produce two Python sets, singlenouns and pluralnouns. When a word is added, if it is in singlenouns, word+"'s" is added as well, with the same frequency. For words in pluralnouns, word + "'" is added. (Names are not looked up but they always get possessives.) The possessives themselves are treated no differently than any other word in the trie.

module:robertperry.py

The robertperry module takes a word (argument 'w' in all method headers) and returns a list of candidates closely related to the word the user might have meant to type. If the user typed a valid word, at the front of the candidate list will be that word. If the user didn't type a valid word, at the front of the candidate list will be the word the algorithm determines the user most likely meant to type.
Methods are called in reverse order of their listing in the source code (as Python code normally goes).

Fields:
trie -- the trie containing the lexicon
candidates -- the list to store candidates for correction
size -- the number of candidates to be returned
Methods:

__init__(self, trie) :
trie - the trie the algorithm will be running on. 
Initializes the candidates list and sets the maximum amount of candidates that will be returned.

complete(self, w, index, node, score): 
w - the string the user entered 
index - an index from which we will be attempting to tack on the rest of the word
node - the node we are currently at from the searchDown method
score - the score we've gotten from the searchDown method
This method takes the current state of an attempt at an autocorrected word from searchDown in the form of a node we're at in the trie. If the word attempt is at an index less than the length of the string the user entered, it will attempt to tack on the rest of the string from nodes in the trie. If it can't, the method returns. If it can, and the resulting node is the end of a valid word, it calculates the score of the word from the score provided by searchDown and the word frequency. It inserts this word-score tuple into a list and sorts it. If the list is bigger than the size set by the initialization method, it pops a candidate from the end of the list.

searchDown(self, w, index, node, neighbor, err, error, score): 
w - the string the user entered
index - an index we're currently at in an autocorrect attempt
node - the node we're currently at (corresponds with the word we're trying to build in an autocorrect attempt)
neighbor - broadly corresponds with whether the last correction made was to a neighboring letter of the letter the user entered on the keyboard
err - current number of errors on this autocorrect attempt
error - max number of errors allowed
score - score of current autocorrect attempt; calculated by types of errors made
This method does most of the work on making an autocorrect attempt. First it checks the amount of times searchDown has been called; if it has been called more than 15,000 times, it exits the method. If not, it recursively builds autocorrect attempts, stopping when the current number of errors reaches the maximum number of errors allowed, or when 'index' is equal to the length of the string the user entered. Types of recursions are performed in this order:
1.	adding a letter
2.	recurring without an error
3.	replace letter with neighbor
4.	replace letter with non-neighbor
5.	replace letter with an apostrophe
6.	transpose letters
7.	delete neighboring letter
8.	delete non-neighboring letter
Additions to the current score are based off of the type of error made:
+ 0 - recurring without error 
+ .75 - apostrophe addition
+ 1 - neighbor replacement, transposition
+ 1.05 - letter addition, neighbor deletion
+ 1.15 - non-neighbor replacement
+ 1.2 - non-neighbor deletion

searchDownHead(self, w, node, neighbor, error):
w - the string the user entered
node - header node of the trie
neighbor - Boolean specifying whether this pass will start with a neighbor or not
error - max number of errors on this pass
This method handles base cases of autocorrect attempts sent to the trie. All error types are attempted as possibilities for the first letter of autocorrect attempts.

findCandidates(self, w):
w - the string the user entered
returned: self.candidates - the list of candidate words 
This is the method called from the front end. First, the input is one letter, it checks to see if it is next to 'a' or 'i', and if so, adds those to the candidate list. Then it checks to see if valid words can be created by splitting the input in two. Then it calls searchDownHead on increasing distance lengths until we have found 4 candidates for an autocorrected word. It returns the candidates found.
